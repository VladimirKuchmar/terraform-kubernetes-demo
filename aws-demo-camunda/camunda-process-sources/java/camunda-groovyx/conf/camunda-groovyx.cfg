import groovyx.acme.net.AcmeHTTP;

sensitive = dependency.load('sensitive.cfg')

email {
	mail.transport.protocol = "smtp"
	mail.smtp.host          = "smtp.gmail.com"
	mail.smtp.port          = "587"
	//mail.smtp.socketFactory.port = "465"
    //mail.smtp.socketFactory.class = "javax.net.ssl.SSLSocketFactory"
	//mail.smtp.ssl.enable    = "true"
	mail.smtp.starttls.enable= "true"
	//=======  custom fields processed by class EMAIL =======
	mail.user               = "eleks.platform@gmail.com"
	mail.pass               = sensitive.email.mail.pass
	mail.from               = "eleks.platform@gmail.com"
	mail.fromName           = "camunda demo"
}
println email
database {
	demo {
		driver   = "com.mysql.cj.jdbc.Driver"
		url      = "jdbc:mysql://eleksintegr.cilc2rgy1cbx.us-west-2.rds.amazonaws.com:3306/camunda_demo?useUnicode=true&characterEncoding=utf8"
		user     = "root"
		password = sensitive.database.demo.password
	}
}

rest {
    //define jira requests
    jira {
        http_client = AcmeHTTP.builder(
            url: 'https://JIRA_PRJ.atlassian.net/rest/api/2',
            headers: [
                Authorization   : sensitive.rest.jira.auth,
                "Content-Type"  : "application/json"
            ]
        )
        tripRegister = { _summary, _description ->
            def t = rest.jira.http_client.post{
                setPath ('/issue')
                body = [
                    fields: [
                        project: [id: "10001" ],
                        summary: _summary,
                        description: _description,
                        issuetype:[ id: "10001" ]
                    ],
                ]
            }
            assert t.response.code in [200,201]
            return t.response.body
        }
        comment = { _key, _body ->
            def t = rest.jira.http_client.post{
                setPath ("/issue/${_key}/comment")
                setBody ( [ 'body': _body ] )
            }
            assert t.response.code in [200,201]
            return t.response.body
        }
        //moves issue to a status
        toStatus = { _key, _status ->
        	//get current status
            def t = rest.jira.http_client.get{
                setPath ("/issue/${_key}")
            }
            assert t.response.code in [200,201]
        	if( _status.equalsIgnoreCase(t.response.body.fields.status.name) ) return true
        	//get available paths
            t = rest.jira.http_client.get{
                setUrl ("https://JIRA_PRJ.atlassian.net/rest/internal/2/issue/${_key}/optimisticTransitions")
            }
            //println t.response
            assert t.response.code in [200,201]
            def trn = t.response.body.transitions.find{ _status.equalsIgnoreCase(it.to.name) }
            assert trn: "transition for $_status not found "
            t = rest.jira.http_client.post{
                setPath ("/issue/${_key}/transitions")
                setBody ( [ 'transition': [id:trn.id] ] )
                setReceiver(AcmeHTTP.TEXT_RECEIVER)
            }
            assert t.response.code in [200,201,204]
            return true
        }
    }
}
